version: '3'
services:
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.82.0
    restart: always
    command:
      - --config=/etc/otelcol-contrib/otel-collector.yml
    volumes:
      - ./docker/collector/otel-collector.yml:/etc/otelcol-contrib/otel-collector.yml
    ports:
      - "1888:1888"
      - "8888:8888"
      - "8889:8889"
      - "13133:13133"
      - "4317:4317"
      - "4318:4318"
      - "55679:55679"
    depends_on:
      - jaeger-all-in-one

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    restart: always
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - "3003:3000"

  jaeger-all-in-one:
    image: jaegertracing/all-in-one:latest
    restart: always
    ports:
      - "16686:16686"
      - "14268"
      - "14250"

#  kafka:
#    image: 'bitnami/kafka:3.7.0'
#    container_name: kafka
#    hostname: kafka
#    ports:
#      - '9094:9094'
#    environment:
#      - KAFKA_CFG_NODE_ID=0
#      - KAFKA_CFG_PROCESS_ROLES=controller,broker
#      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
#      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
#      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
#      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
#      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
#    volumes:
#      - kafka_data:/bitnami/kafka

#  kafka-ui:
#    image: provectuslabs/kafka-ui:latest
#    container_name: kafka-ui
#    ports:
#      - "8810:8080"
#    environment:
#      - KAFKA_CLUSTERS_0_NAME=local
#      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
#      - AUTH_TYPE=LOGIN_FORM
#      - SPRING_SECURITY_USER_NAME=tuanbeovn
#      - SPRING_SECURITY_USER_PASSWORD=tuanbeovn17
#    restart: always

#  redis:
#    image: redislabs/redismod
#    platform: linux/amd64
#    ports:
#      - 6379:6379
#
#  redisinsight:
#    image: redislabs/redisinsight:latest
#    platform: linux/amd64
#    ports:
#      - '5540:5540'
#    volumes:
#      - ./Users/ajeetraina/data/redisinsight:/db

#  postgres:
#    image: postgres:16-alpine
#    restart: unless-stopped
#    ports:
#      - 5432:5432
#    volumes:
#      - ~/apps/postgres:/var/lib/postgresql/data
#    environment:
#      POSTGRES_PASSWORD: P@ssword112233
#      POSTGRES_USER: admin
#      POSTGRES_DB: blogs

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.16.4
    container_name: elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - xpack.security.http.ssl.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - elastic
    ulimits:
      memlock:
        soft: -1
        hard: -1
    deploy:
      resources:
        limits:
          memory: 2G

  logstash:
    image: logstash:8.16.4
    container_name: logstash
    restart: always
    ports:
      - "5600:5600"
      - "9600:9600"
    environment:
      - ELASTICSEARCH_HOST=http://elasticsearch:9200
      - XPACK_MONITORING_ENABLED=true
    volumes:
      - ./docker/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - elasticsearch
    networks:
      - elastic

  kibana:
    image: docker.elastic.co/kibana/kibana:8.16.4
    container_name: kibana
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
      - xpack.security.transport.ssl.enabled=false
    ports:
      - "5601:5601"
    networks:
      - elastic
    depends_on:
      - elasticsearch

volumes:
  postgres-db-volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ~/apps/postgres
  elasticsearch-data:
    driver: local
  kafka_data:

networks:
  backend-network:
    driver: bridge
  elastic:
    driver: bridge